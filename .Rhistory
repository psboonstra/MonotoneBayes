devtools::build()
devtools::check()
devtools::check()
stanmodels$RegHSfix
stanmodels$RegHSfix
X <- runif(10, 0, 1)
Y <- rbinom(10, 1, 0.2)
monotoneBayes(X, Y)
monotoneBayes(X, Y, fix = T)
monotoneBayes(X, Y, prior = "Original HS")
monotoneBayes(X, Y)
m = monotoneBayes(X, Y)
outcome = rstan::extract(model)
outcome = rstan::extract(m)
m
m$model
outcome = rstan::extract(m$model)
summary(outcome)
outcome
print(m)
estAlphas = colMeans(outcome$alpha)
estGamma = mean(outcome$gamma)
denominator = sum(estAlphas)/L + 1 + estGamma
L = 10
denominator = sum(estAlphas)/L + 1 + estGamma
x.J = x %/% (1/L) + 1
x = seq(0, 1, length.out = 100)
x.J = x %/% (1/L) + 1
for (i in 1:length(x)){
if (x.J[i] == 1) {
y[i] = ( x[i] * estAlphas[1] +  1) / denominator
} else {
y[i] = ( sum(estAlphas[1:(x.J[i]-1)])/L + (x[i]-(x.J[i]-1) *1.0/L) * estAlphas[x.J[i]] +
1 ) / denominator
}
}
y = x
x.J = x %/% (1/L) + 1
for (i in 1:length(x)){
if (x.J[i] == 1) {
y[i] = ( x[i] * estAlphas[1] +  1) / denominator
} else {
y[i] = ( sum(estAlphas[1:(x.J[i]-1)])/L + (x[i]-(x.J[i]-1) *1.0/L) * estAlphas[x.J[i]] +
1 ) / denominator
}
}
plot(y)
estAlphas
matAlpha = outcome$alpha
colMeans(matAlpha)
colMeans(matAlpha[2001:4000,])
??rstan::print.stanfit
print(m, probs = (0.5))
m@mode
summary(m)
summary(m$model)
print(m)
print(m$model)
rstan::summary(m)
rstan::summary(m$model)
rstan::summary(m$model)
print(m$model)
rstan::summary(m$model, pars = c("Gamma"))
rstan::summary(m$model)
rstan::summary(m$model, probs = c(0.5))
rstan::summary(m$model, probs = c(0.5), pars =c("gamma"))
rstan::summary(m$model, probs = c(0.5), pars =c("gamma", "alpha"))
outcome.sum = rstan::summary(m$model, probs = c(0.5), pars =c("gamma", "alpha"))$summary
outcome.sum
ndigit = 3
outcome.sum = round(rstan::summary(m$model, probs = c(0.5), pars =c("gamma", "alpha"))$summary, ndigts = ndigit)
outcome.sum = round(rstan::summary(m$model, probs = c(0.5), pars =c("gamma", "alpha"))$summary, ndigit)
View(outcome.sum)
View(outcome.sum)
View(outcome.sum)
outcome.sum = round(rstan::summary(m$model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
View(outcome.sum)
outcome.sum = round(rstan::summary(m$model)$summary, ndigit)
View(outcome.sum)
ploy(y, ylim = c(0,1))
plot(y, ylim = c(0,1))
outcome.sum = round(rstan::summary(m$model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
View(outcome.sum)
outcome = outcome.sum
View(outcome.sum)
View(outcome.sum)
nr = nrow(outcome.sum)
colSums(outcome.sum[-1,])
outcome.sum[-1,]
outcome = outcome.sum
outcome[nr+1,] = colSums(outcome.sum[-1,])
outcome = matrix(0, nrow = nrow(outcome.sum)+1, ncol = ncol(outcome.sum))
outcome[2,] = colSums(outcome.sum[-1,])
outcome.sum = round(rstan::summary(m$model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
outcome = matrix(0, nrow = nrow(outcome.sum)+1, ncol = ncol(outcome.sum))
outcome[2,] = colSums(outcome.sum[-1,])
outcome[1,3:nrow(outcome),] = outcome.sum
View(outcome)
rbind(outcome.sum, 0)
rbind(outcome.sum[1,], 0, outcome.sum[-1,])
outcome[2,] = colSums(outcome.sum)
outcome[2,] = colSums(outcome.sum[-1,])
View(outcome.sum)
View(outcome)
outcome.sum = round(rstan::summary(m$model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
outcome = rbind(outcome.sum[1,], 0, outcome.sum[-1,])
outcome[2,] = colSums(outcome.sum[-1,])
View(outcome)
outcome
outcome[2,c(2,3,5:10)] = NA
y = x = seq(0, 1, length.out = 100)
outcome = rstan::extract(model)
outcome = rstan::extract(m$model)
estAlphas = colMeans(outcome$alpha)
estGamma = mean(outcome$gamma)
denominator = sum(estAlphas)/L + 1 + estGamma
L =10
x.J = x %/% (1/L) + 1
for (i in 1:length(x)){
if (x.J[i] == 1) {
y[i] = ( x[i] * estAlphas[1] +  1) / denominator
} else {
y[i] = ( sum(estAlphas[1:(x.J[i]-1)])/L + (x[i]-(x.J[i]-1) *1.0/L) * estAlphas[x.J[i]] +
1 ) / denominator
}
}
ggplot2::ggplot() + geom_line(aes(x = x, y = y))
ggplot2::ggplot() + ggplot2::geom_line(aes(x = x, y = y))
ggplot2::ggplot() + ggplot2::geom_line(ggplot2::aes(x = x, y = y))
ggplot2::ggplot() + ggplot2::geom_line(ggplot2::aes(x = x, y = y)) + ylim(0,1)
ggplot2::ggplot() + ggplot2::geom_line(ggplot2::aes(x = x, y = y)) + ggplot2::ylim(0,1)
df = data.frame("x" = x, "EstPr.Y" = y)
plotModel = function(model,L,method = "mean"){
y = x = seq(0, 1, length.out = 100)
outcome = rstan::extract(model)
if(method = "median"){
plotModel = function(model,L,method = "mean"){
y = x = seq(0, 1, length.out = 100)
outcome = rstan::extract(model)
if(method == "median"){
estAlphas = apply(outcome$alpha, 2, median)
estGamma = median(outcome$gamma)
} else {
estAlphas = colMeans(outcome$alpha)
estGamma = mean(outcome$gamma)
}
denominator = sum(estAlphas)/L + 1 + estGamma
x.J = x %/% (1/L) + 1
for (i in 1:length(x)){
if (x.J[i] == 1) {
y[i] = ( x[i] * estAlphas[1] +  1) / denominator
} else {
y[i] = ( sum(estAlphas[1:(x.J[i]-1)])/L + (x[i]-(x.J[i]-1) *1.0/L) * estAlphas[x.J[i]] +
1 ) / denominator
}
}
df = data.frame("x" = x, "EstPr.Y" = y)
plt = ggplot2::ggplot() + ggplot2::geom_line(ggplot2::aes(x = x, y = y)) + ggplot2::ylim(0,1)
rs = list(df, plt)
names(rs) = c("FittedProb", "Curve")
return(rs)
}
plotModel = function(model,L,method = "mean"){
y = x = seq(0, 1, length.out = 100)
outcome = rstan::extract(model)
if(method == "median"){
estAlphas = apply(outcome$alpha, 2, median)
estGamma = median(outcome$gamma)
} else {
estAlphas = colMeans(outcome$alpha)
estGamma = mean(outcome$gamma)
}
denominator = sum(estAlphas)/L + 1 + estGamma
x.J = x %/% (1/L) + 1
for (i in 1:length(x)){
if (x.J[i] == 1) {
y[i] = ( x[i] * estAlphas[1] +  1) / denominator
} else {
y[i] = ( sum(estAlphas[1:(x.J[i]-1)])/L + (x[i]-(x.J[i]-1) *1.0/L) * estAlphas[x.J[i]] +
1 ) / denominator
}
}
df = data.frame("x" = x, "EstPr.Y" = y)
plt = ggplot2::ggplot() + ggplot2::geom_line(ggplot2::aes(x = x, y = y)) + ggplot2::ylim(0,1)
rs = list(df, plt)
names(rs) = c("FittedProb", "Curve")
return(rs)
}
testRS = plotModel(m$model, L = 10)
testRS$Curve
testRS$Curve
testRS$FittedProb
devtools::check()
devtools::check()
devtools::document()
rm(list = c("plotModel"))
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
pkgbuild::compile_dll()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
devtools::clean_dll
devtools::clean_dll()
pkgbuild::compile_dll()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
pkgbuild::compile_dll()
devtools::clean_dll(),
devtools::clean_dll(),
devtools::clean_dll()
pkgbuild::compile_dll()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
??sampling
X <- runif(10, 0, 1)
Y <- rbinom(10, 1, 0.2)
m = monotoneBayes(X, Y)
1/10
usethis::use_vignette()
usethis::use_vignette()
usethis::use_vignette(intro)
usethis::use_vignette("intro")
devtools
devtools::build_vignettes()
browseVignettes("MonotoneBayes")
library(MonotoneBayes)
set.seed(108)
data = matrix(0, nrow = N, ncol = 5)
N = 50
L = 10
set.seed(108)
data = matrix(0, nrow = N, ncol = 5)
data[,"x"] = runif(N, 0, 1)
trueP = c(0,0.2,0.5,0.8,1)
set.seed(108)
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
c("x",paste(m,1:5,sep = ""))
c("x",paste("m",1:5,sep = ""))
colnames(data) = c("x",paste("m",1:5,sep = ""))
?monotoneBayes
model1 = monotoneBayes(data[,"x"], data[,"m1"])
model2 = monotoneBayes(data[,"x"], data[,"m2"])
rs1 = sumStats(model1, ndigit = 3)
rs2 = sumStats(model2, ndigit = 3)
View(rs1)
sumStats = function(model, AllPara = F, ndigit = 3, orgHS = F){ # find the posterior distribution of Gamma, IntAlpha, alpha , lambda, and inte
if (AllPara == T){
if (orgHS == T){ # then no c_sq parameter
outcome = round(rstan::summary(model, pars =c("gamma","tau_sq","alpha","lambda_sq"))$summary, ndigit)
} else {
outcome = round(rstan::summary(model, pars =c("gamma","c_sq","tau_sq", "alpha","lambda_sq"))$summary, ndigit)
}
} else {
outcome.sum = round(rstan::summary(model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
outcome = rbind(outcome.sum[1,], 0, outcome.sum[-1,])
outcome[2,] = colSums(outcome.sum[-1,])
outcome[2,c(2,3,5:10)] = NA
rownames(outcome)[1:2] = c("gamma","IntAlpha")
}
return(outcome)
}
View(rs2)
View(rs1)
View(rs2)
rstan::summary(model1, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary
model3 = monotoneBayes(data[,"x"], data[,"m3"])
model3 = monotoneBayes(data[,"x"], data[,"m3"])
model4 = monotoneBayes(data[,"x"], data[,"m4"])
model5 = monotoneBayes(data[,"x"], data[,"m5"])
rs3 = sumStats(model3, ndigit = 3)
rs4 = sumStats(model4, ndigit = 3)
rs5 = sumStats(model5, ndigit = 3)
View(rs4)
View(rs5)
plotModel(model3,L=10,method = "median")
monotoneBayes = function(X, Y, L = 10, tau0 = 1e-4,
c_sq = 10^2, fix = F,
c_alpha = 0.01, c_beta = 0.01 * 4, prior = "Regularized HS", ...){
N = length(Y)
data.L = X %/% (1/L) + 1
dt.stan = list(Y=Y, X = X, J = data.L,  L=L, N=N,
local_dof_stan = 1,
global_dof_stan = 1,
tau0_sq = tau0^2)
if (prior == "Original HS"){
model = rstan::sampling(stanmodels$OrgHS, data = dt.stan, ...)
} else if (prior == "Laplacian"){
model = "Laplacian ... TBD..."
} else if (prior == "Gaussian ... TBD..."){
model = "Gaussian"
} else {
if (fix == T) {
dt.stan$c_sq = c_sq
model = rstan::sampling(stanmodels$RegHSfix, data = dt.stan, ...)
} else {
dt.stan$c_sq_shape = c_alpha
dt.stan$c_sq_scale = c_beta
model = rstan::sampling(stanmodels$RegHS, data = dt.stan)
}
}
return(model)
}
model.test = monotoneBayes(data[,"x"], data[,"m5"], niter =5000)
devtools::load_all(".")
pkgbuild::compile_dll()
devtools::clean_dll()
pkgbuild::compile_dll()
stanmodels
model.test = monotoneBayes(data[,"x"], data[,"m5"], niter =5000)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 3000)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
N = 50
L = 10
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
colnames(data) = c("x",paste("m",1:5,sep = ""))
model1 = monotoneBayes(data[,"x"], data[,"m1"])
model.test = monotoneBayes(data[,"x"], data[,"m4"], iter = 5000, warmup = 2500)
rs3 = sumStats(model3, ndigit = 3)
rs4 = sumStats(model4, ndigit = 3)
rs5 = sumStats(model5, ndigit = 3)
rs.tst = sumStats(model.test, ndigit = 3)
View(rs.tst)
print(model.test)
summary(model.test)
rstan::summary(model.test)
